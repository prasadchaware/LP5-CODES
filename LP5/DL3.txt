# Import necessary libraries
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import fashion_mnist

# Load the dataset
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

# Preprocess the data
train_images = train_images.reshape((60000, 28, 28, 1)).astype('float32') / 255
test_images = test_images.reshape((10000, 28, 28, 1)).astype('float32') / 255

# Define the CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels, epochs=5, batch_size=64)

# Evaluate the model
test_loss, test_acc = model.evaluate(test_images, test_labels)
print('Test accuracy:', test_acc)









# Make predictions on new images
import numpy as np

# Function to predict clothing category
def predict_clothing_category(model, image):
    # Preprocess the image
    image = np.expand_dims(image, axis=0)
    image = image.reshape((1, 28, 28, 1)).astype('float32') / 255
    # Make prediction
    prediction = model.predict(image)
    # Get the predicted class
    predicted_class = np.argmax(prediction)
    return predicted_class

# Example usage:
# Load your trained model (assuming you've already trained and saved it)
# model = tf.keras.models.load_model('your_model_path')

# Load an example image (replace this with your own image)
example_image = test_images[0]

# Predict the category of the example image
predicted_class = predict_clothing_category(model, example_image)
print('Predicted class:', predicted_class)







UPDATED : 
# Import necessary libraries
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import fashion_mnist
import numpy as np

# Load the dataset
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

# Preprocess the data
train_images = train_images.reshape((60000, 28, 28, 1)).astype('float32') / 255
test_images = test_images.reshape((10000, 28, 28, 1)).astype('float32') / 255

# Define the CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels, epochs=5, batch_size=64)

# Evaluate the model
test_loss, test_acc = model.evaluate(test_images, test_labels)
print('Test accuracy:', test_acc)

# Function to predict clothing category
def predict_clothing_category(image):
    # Preprocess the image
    image = np.expand_dims(image, axis=0)
    image = image.reshape((1, 28, 28, 1)).astype('float32') / 255
    # Make prediction
    prediction = model.predict(image)
    # Get the predicted class
    predicted_class = np.argmax(prediction)
    return predicted_class

# Example usage:
# Load an example image (replace this with your own image)
example_image = test_images[0]

# Predict the category of the example image
predicted_class = predict_clothing_category(example_image)
print('Predicted class:', predicted_class)
